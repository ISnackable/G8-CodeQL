// Generated by https://quicktype.io
// https://help.semmle.com/lgtm-enterprise/user/help/sarif-results-file.html

export interface SarifLog {
  $schema: string;
  version: string;
  runs: Run[];
}

export interface Run {
  tool: Tool;
  versionControlProvenance: VersionControlProvenance[];
  artifacts: Artifact[];
  results: Result[];
  newlineSequences?: string[];
  columnKind: string;
  properties: RunProperties;
}

export interface Artifact {
  location: ArtifactLocationClass;
}

export interface ArtifactLocationClass {
  uri: string;
  uriBaseId?: URIBaseID;
  index: number;
}

export enum URIBaseID {
  Srcroot = "%SRCROOT%",
}

export interface RunProperties {
  "semmle.formatSpecifier": string;
  "semmle.sourceLanguage": string;
}

/*
result object
The composition of the results is dependent on the options provided to CodeQL. 
By default, the results are grouped by unique message format string and primary location. 
Thus, two results that occur at the same location with the same underlying message, 
will appear as a single result in the output. This behavior can be disabled by using the flag --ungroup-results, 
in which case no results are grouped.
*/
export interface Result {
  ruleId: string;
  ruleIndex: number;
  message: Message;
  locations: ResultLocation[];
  partialFingerprints: PartialFingerprints;
  relatedLocations?: RelatedLocation[];
  codeFlows?: CodeFlow[];
  suppressions?: Suppression[];
}

export interface CodeFlow {
  threadFlows: ThreadFlow[];
}

export interface ThreadFlow {
  locations: ThreadFlowLocation[];
}

export interface ThreadFlowLocation {
  location: LocationLocation;
}

export interface LocationLocation {
  physicalLocation: PhysicalLocation;
  message: Message;
}

export interface Message {
  text: string;
}

export interface PhysicalLocation {
  artifactLocation: ArtifactLocationClass;
  region: Region;
  contextRegion: ContextRegion;
}

export interface ContextRegion {
  startLine: number;
  endLine: number;
  snippet: Message;
}

export interface Region {
  startLine: number;
  startColumn?: number;
  endColumn: number;
  endLine?: number;
}

export interface ResultLocation {
  physicalLocation: PhysicalLocation;
}

export interface Suppression {
  "@kind": string;
}

export interface PartialFingerprints {
  primaryLocationLineHash: string;
  primaryLocationStartColumnFingerprint: string;
}

export interface RelatedLocation {
  id: number;
  physicalLocation: PhysicalLocation;
  message: Message;
}

export interface Tool {
  driver: Driver;
  extensions: Extension[];
}

export interface Driver {
  name: string;
  organization: string;
  semanticVersion: string;
  rules: Rule[];
}

export interface Rule {
  id: string;
  name: string;
  shortDescription: Message;
  fullDescription: Message;
  defaultConfiguration: DefaultConfiguration;
  properties: RuleProperties;
}

export interface DefaultConfiguration {
  enabled: boolean;
  level: Level;
}

export enum Level {
  Error = "error",
  Note = "note",
  Warning = "warning",
}

export enum Severity {
  Error = "error",
  Warning = "warning",
  Recommendation = "recommendation",
}

export interface RuleProperties {
  tags: string[];
  description: string;
  id: string;
  kind: Kind;
  name: string;
  precision: Precision;
  "problem.severity": Severity;
}

export enum Kind {
  PathProblem = "path-problem",
  Problem = "problem",
}

export enum Precision {
  High = "high",
  Medium = "medium",
  VeryHigh = "very-high",
}

export interface Extension {
  name: string;
  semanticVersion: string;
  locations: ExtensionLocation[];
}

export interface ExtensionLocation {
  uri: string;
  description: Message;
}

export interface VersionControlProvenance {
  repositoryUri: string;
  revisionId: string;
}
